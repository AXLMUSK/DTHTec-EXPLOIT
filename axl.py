import os
import sys
import random
import time
import webbrowser
import socket

usuario = input('Escolha um nome de usuario>  ')
os.system('clear')
#CORES
vermelho = '\033[1;31m'
verde = '\033[1;92m'
azul = '\033[1;34m'
amarelo = '\033[1;33m'
reset = '\033[0;0m'
ver = f'{vermelho}>'
axl = True
print(vermelho)

print('''
██████╗ ████████╗██╗  ██╗████████╗███████╗ ██████╗              ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔══██╗╚══██╔══╝██║  ██║╚══██╔══╝██╔════╝██╔════╝              ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
██║  ██║   ██║   ███████║   ██║   █████╗  ██║         █████╗    █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
██║  ██║   ██║   ██╔══██║   ██║   ██╔══╝  ██║         ╚════╝    ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
██████╔╝   ██║   ██║  ██║   ██║   ███████╗╚██████╗              ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚═════╝              ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
                                                                                                                        ''')

print(f'''{reset}
[!]- FERRAMENTAS : 23
[!]- DESENVOLVEDOR : AXLMUSK</>
[!]- VERSION : 2.0/2022-SPACE-STEX/AXLMUSK
{amarelo}
ATTENTION: THIS FRAMEWORK WAS DEVELOPED FOR LINUX WITH DOWNLOAD MANAGER "APT" ''')

while axl:
	print(azul)
	axl = input(f'{vermelho}DTHTec@{usuario}:~# {reset}')
	if axl == 'menu':
		print(f'''{amarelo}
		[1]- respeite a privacidade dos outros.
		[2]- Pense antes de Digitar.
		[3]- Com Grandes Poderes vem grandes Responsabilidades.

		[!] clique ENTER para continuar''')
		input()
		print(reset)
		print(f'''
		{vermelho}[01]- {reset}use nmap
		{vermelho}[02]- {reset}use sqlmap
		{vermelho}[03]- {reset}use sshbrute
		{vermelho}[04]- {reset}use dirb
		{vermelho}[05]- {reset}use doser
		{vermelho}[06]- {reset}use tor
		{vermelho}[07]- {reset}use apache2
		{vermelho}[08]- {reset}use python
		{vermelho}[09]- {reset}use php
		{vermelho}[10]- {reset}use wget
		{vermelho}[11]- {reset}open wireshark
		{vermelho}[12]- {reset}use wpscan
		{vermelho}[13]- {reset}use adb 
		{vermelho}[14]- {reset}use calculator
		{vermelho}[15]- {reset}use nikto
		{vermelho}[16]- {reset}open geany
		{vermelho}[17]- {reset}use git
		{vermelho}[18]- {reset}exploits-db
		{vermelho}[19]- {reset}use wapiti
		{vermelho}[20]- {reset}proxychains -h
		{vermelho}[21]- {reset}open shodan (Navegador)
		{vermelho}[22]- {reset}open viacep
		{vermelho}[23]- {reset}curso desec 
		
		{vermelho}[00]- {reset}info
		{vermelho}[99]- {reset}more''')
	elif axl == 'open shodan':
		lib = input()
		url = "https://www.shodan.io/dashboard"
		webbrowser.open_new(url)
		
	
	elif axl == 'proxychains > wget':
		wgetxy = input('URL> ')
		os.system(f'proxychains4 wget {wgetxy}')

	elif axl == 'IDES':
		print(''' 
		[1]- open geany
		[2]- vim
		[3]- nano
		[4]- codelite''')
		
	elif axl == 'use codelite':
		os.system('codelite')

	elif axl == 'navegadores':
		print('''
		[1]- open shodan''')


	elif axl == 'proxychains > nmap':
		print(''' 
		[1] -A (Varredura completa(Escaneia as portas abertas e as fechadas,e quais serviços estão rodando em cada uma delas)
		[2] -sS (Varredura simples(Escaneia apenas as portas abertas e as fechadas)''')
		print()
		nmapxy = input('IP> ')
		comand0 = input('mode> -')
		os.system(f'proxychains4 nmap {comand0} {nmapxy}')
		
		
	elif axl == 'bruteforces':
		print('''
		[1]- use dirb
		[2]- use dirbuster
		[3]- use sshbrute
		[4]- use wpscan''')
		
	elif axl == 'anonimato':
		print('''
		[1]- use tor
		[2]- proxychains -h''')

	elif axl == 'proxychains > sqlmap':
		sqlmapxy = input('URL : ')
		os.system(f'proxychains4 sqlmap -u {sqlmapxy} --dbs')
		dbsxy = input('dbs> ')
		os.system('clear')
		os.system(f'proxychains4 sqlmap -u {sqlmapxy} --dbs -D {dbsxy} --tables')
		tablexy = input('table> ')
		os.system(f'proxychains4 sqlmap -u {sqlmapxy} --dbs -D {dbsxy} -T {tablexy} --columns')

	elif axl == 'proxychains -h':
			print('''
			para Utilizar o proxychains Digite o Seguinte Comando :
			proxychains > (nome da ferramenta que você quer utilizar)
			
		ex: 
			proxychains > nmap''')

	elif axl == 'wapiti -h':
		print('''

		
 ██╗    ██╗ █████╗ ██████╗ ██╗████████╗██╗██████╗
 ██║    ██║██╔══██╗██╔══██╗██║╚══██╔══╝██║╚════██╗
 ██║ █╗ ██║███████║██████╔╝██║   ██║   ██║ █████╔╝
 ██║███╗██║██╔══██║██╔═══╝ ██║   ██║   ██║ ╚═══██╗
 ╚███╔███╔╝██║  ██║██║     ██║   ██║   ██║██████╔╝
  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝     ╚═╝   ╚═╝   ╚═╝╚═════╝  
Wapiti-3.0.4 (wapiti.sourceforge.io)
usage: wapiti [-h] [-u URL] [--scope {page,folder,domain,url,punk}] [-m MODULES_LIST] [--list-modules] [--update] [-l LEVEL] [-p PROXY_URL]
              [--tor] [-a CREDENTIALS] [--auth-type {basic,digest,kerberos,ntlm,post}] [-c COOKIE_FILE] [--skip-crawl] [--resume-crawl]
              [--flush-attacks] [--flush-session] [--store-session PATH] [--store-config PATH] [-s URL] [-x URL] [-r PARAMETER]
              [--skip PARAMETER] [-d DEPTH] [--max-links-per-page MAX] [--max-files-per-dir MAX] [--max-scan-time SECONDS]
              [--max-attack-time SECONDS] [--max-parameters MAX] [-S FORCE] [-t SECONDS] [-H HEADER] [-A AGENT] [--verify-ssl {0,1}]
              [--color] [-v LEVEL] [-f FORMAT] [-o OUPUT_PATH] [--external-endpoint EXTERNAL_ENDPOINT_URL]
              [--internal-endpoint INTERNAL_ENDPOINT_URL] [--endpoint ENDPOINT_URL] [--no-bugreport] [--version]

Wapiti-3.0.4: Web application vulnerability scanner

optional arguments:
  -h, --help            show this help message and exit
  -u URL, --url URL     URL base usada para definir o escopo da verificação (escopo padrão é pasta)
  --scope {page,folder,domain,url,punk}
                        Definir escopo de verificação
  -m MODULES_LIST, --module MODULES_LIST
                        Lista de módulos para carregar
  --list-modules        List Wapiti attack modules and exit
  --update              Update Wapiti attack modules and exit
  -l LEVEL, --level LEVEL
                        Definir nível de ataque
  -p PROXY_URL, --proxy PROXY_URL
                        Configure o proxy HTTP(S) a ser usado. Suportados: proxies http(s) e socks
  --tor                 Use Tor listener (127.0.0.1:9050)
  -a CREDENTIALS, --auth-cred CREDENTIALS
                        Definir credenciais de autenticação HTTP
  --auth-type {basic,digest,kerberos,ntlm,post}
                        Defina o tipo de autenticação a ser usada
  -c COOKIE_FILE, --cookie COOKIE_FILE
                        Defina um arquivo de cookie JSON a ser usado
  --skip-crawl          Não será retomado o processo de verificação, URLs de ataque verificados durante uma sessão anterior
  --resume-crawl        Resume the scanning process (if stopped) even if some attacks were previously performed
  --flush-attacks       Limpar histórico de ataques e vulnerabilidades para a sessão atual
  --flush-session       Limpar tudo o que foi encontrado anteriormente para este alvo (rastreados, URLs, vulnerabilidades, etc)
  --store-session PATH  Directory where to store attack history and session data.
  --store-config PATH   Directory where to store configuration databases.
  -s URL, --start URL   Definir uma URL para iniciar a verificação
  -x URL, --exclude URL
                        Definir uma URL a ser excluída da verificação
  -r PARAMETER, --remove PARAMETER
                        Remover este parâmetro das urls
  --skip PARAMETER      Ignorar ataque com os parâmetro(s) definidos
  -d DEPTH, --depth DEPTH
                        Defina o nível de profundidade que o scanner deve explorar no site
  --max-links-per-page MAX
                        Defina quantos links (no escopo) o scanner deve extrair para cada página
  --max-files-per-dir MAX
                        Defina quantas páginas o scanner deve explorar por diretório
  --max-scan-time SECONDS
                        Set how many seconds you want the scan to last (floats accepted)
  --max-attack-time SECONDS
                        Set how many seconds you want each attack module to last (floats accepted)
  --max-parameters MAX  URLs e formulários com mais parâmetros que o limite máximo serão apagados antes do ataque.
  -S FORCE, --scan-force FORCE
                        Maneira fácil de reduzir o número de URLs digitalizados e atacados. Valores possíveis: paranoico, sorrateiro,
                        educado, normal, agressivo, insano
  -t SECONDS, --timeout SECONDS
                        Definir tempo limite para requisições
  -H HEADER, --header HEADER
                        Definir um cabeçalho personalizado para ser usado em todas as requisições
  -A AGENT, --user-agent AGENT
                        Definir um usuário ativo personalizado para ser usado em todas as solicitações
  --verify-ssl {0,1}    Definir verificação de SSL (o padrão é sem verificação)
  --color               Colorir saída
  -v LEVEL, --verbose LEVEL
                        Definir nível de verbosidade (0: baixo, 1: normal, 2: detalhado)
  -f FORMAT, --format FORMAT
                        Definir formato de saída. Suportados: json, html (padrão), txt, xml
  -o OUPUT_PATH, --output OUPUT_PATH
                        Arquivo ou pasta de saída
  --external-endpoint EXTERNAL_ENDPOINT_URL
                        Url serving as endpoint for target
  --internal-endpoint INTERNAL_ENDPOINT_URL
                        Url serving as endpoint for attacker
  --endpoint ENDPOINT_URL
                        Url serving as endpoint for both attacker and target
  --no-bugreport        Não enviar um relatório automático de erros quando um módulo de ataque falhar
  --version             Mostrar o número da versão do programa e encerrar

''')

	elif axl == 'use wapiti':
		print('''
[-h] [-u URL] [--scope {page,folder,domain,url,punk}] [-m MODULES_LIST] [--list-modules] [--update] [-l LEVEL] [-p PROXY_URL]
[--tor] [-a CREDENTIALS] [--auth-type {basic,digest,kerberos,ntlm,post}] [-c COOKIE_FILE] [--skip-crawl] [--resume-crawl]
[--flush-attacks] [--flush-session] [--store-session PATH] [--store-config PATH] [-s URL] [-x URL] [-r PARAMETER]
[--skip PARAMETER] [-d DEPTH] [--max-links-per-page MAX] [--max-files-per-dir MAX] [--max-scan-time SECONDS]
[--max-attack-time SECONDS] [--max-parameters MAX] [-S FORCE] [-t SECONDS] [-H HEADER] [-A AGENT] [--verify-ssl {0,1}]
[--color] [-v LEVEL] [-f FORMAT] [-o OUPUT_PATH] [--external-endpoint EXTERNAL_ENDPOINT_URL]
[--internal-endpoint INTERNAL_ENDPOINT_URL] [--endpoint ENDPOINT_URL] [--no-bugreport] [--version]''')
              
		wapiti0 = input('mode> -- ')
		os.system(f'wapiti --{wapiti0}')

	elif axl == 'exploits-db':
		os.system('sudo firefox https://www.exploit-db.com/')

	elif axl == 'install':
		os.system('clear')
		os.system('apt install nmap sqlmap hydra dirb tor apache2 wapiti php curl git gem adb wireshark vim patator crunch nikto ettercap-graphical -y')
		os.system('gem install wpscan')
	elif axl == 'clear':
		os.system('clear')
		
	elif axl == 'proxychains > wpscan':
		print(f'{wpscan0}')
		wpscanxy = input('comand> ')
		os.system(f'proxychains4 wpscan {wpscanxy}')
	elif axl == 'use wpscan':
		wpscan0 = ('''
 __          _______   _____
 \ \        / /  __ \ / ____|
  \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
   \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \
    \  /\  /  | |     ____) | (__| (_| | | | |
     \/  \/   |_|    |_____/ \___|\__,_|_| |_|

         WordPress Security Scanner by the WPScan Team
                         Version 3.8.20
                               
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________

Usage: wpscan [options]
        --url URL                                 The URL of the blog to scan
                                                  Allowed Protocols: http, https
                                                  Default Protocol if none provided: http
                                                  This option is mandatory unless update or help or hh or version is/are supplied
    -h, --help                                    Display the simple help and exit
        --hh                                      Display the full help and exit
        --version                                 Display the version and exit
    -v, --verbose                                 Verbose mode
        --[no-]banner                             Whether or not to display the banner
                                                  Default: true
    -o, --output FILE                             Output to FILE
    -f, --format FORMAT                           Output results in the format supplied
                                                  Available choices: json, cli, cli-no-colour, cli-no-color
        --detection-mode MODE                     Default: mixed
                                                  Available choices: mixed, passive, aggressive
        --user-agent, --ua VALUE
        --random-user-agent, --rua                Use a random user-agent for each scan
        --http-auth login:password
    -t, --max-threads VALUE                       The max threads to use
                                                  Default: 5
        --throttle MilliSeconds                   Milliseconds to wait before doing another web request. If used, the max threads will be set to 1.
        --request-timeout SECONDS                 The request timeout in seconds
                                                  Default: 60
        --connect-timeout SECONDS                 The connection timeout in seconds
                                                  Default: 30
        --disable-tls-checks                      Disables SSL/TLS certificate verification, and downgrade to TLS1.0+ (requires cURL 7.66 for the latter)
        --proxy protocol://IP:port                Supported protocols depend on the cURL installed
        --proxy-auth login:password
        --cookie-string COOKIE                    Cookie string to use in requests, format: cookie1=value1[; cookie2=value2]
        --cookie-jar FILE-PATH                    File to read and write cookies
                                                  Default: /tmp/wpscan/cookie_jar.txt
        --force                                   Do not check if the target is running WordPress or returns a 403
        --[no-]update                             Whether or not to update the Database
        --api-token TOKEN                         The WPScan API Token to display vulnerability data, available at https://wpscan.com/profile
        --wp-content-dir DIR                      The wp-content directory if custom or not detected, such as "wp-content"
        --wp-plugins-dir DIR                      The plugins directory if custom or not detected, such as "wp-content/plugins"
    -e, --enumerate [OPTS]                        Enumeration Process
                                                  Available Choices:
                                                   vp   Vulnerable plugins
                                                   ap   All plugins
                                                   p    Popular plugins
                                                   vt   Vulnerable themes
                                                   at   All themes
                                                   t    Popular themes
                                                   tt   Timthumbs
                                                   cb   Config backups
                                                   dbe  Db exports
                                                   u    User IDs range. e.g: u1-5
                                                        Range separator to use: '-'
                                                        Value if no argument supplied: 1-10
                                                   m    Media IDs range. e.g m1-15
                                                        Note: Permalink setting must be set to "Plain" for those to be detected
                                                        Range separator to use: '-'
                                                        Value if no argument supplied: 1-100
                                                  Separator to use between the values: ','
                                                  Default: All Plugins, Config Backups
                                                  Value if no argument supplied: vp,vt,tt,cb,dbe,u,m
                                                  Incompatible choices (only one of each group/s can be used):
                                                   - vp, ap, p
                                                   - vt, at, t
        --exclude-content-based REGEXP_OR_STRING  Exclude all responses matching the Regexp (case insensitive) during parts of the enumeration.
                                                  Both the headers and body are checked. Regexp delimiters are not required.
        --plugins-detection MODE                  Use the supplied mode to enumerate Plugins.
                                                  Default: passive
                                                  Available choices: mixed, passive, aggressive
        --plugins-version-detection MODE          Use the supplied mode to check plugins' versions.
                                                  Default: mixed
                                                  Available choices: mixed, passive, aggressive
        --exclude-usernames REGEXP_OR_STRING      Exclude usernames matching the Regexp/string (case insensitive). Regexp delimiters are not required.
    -P, --passwords FILE-PATH                     List of passwords to use during the password attack.
                                                  If no --username/s option supplied, user enumeration will be run.
    -U, --usernames LIST                          List of usernames to use during the password attack.
                                                  Examples: 'a1', 'a1,a2,a3', '/tmp/a.txt'
        --multicall-max-passwords MAX_PWD         Maximum number of passwords to send by request with XMLRPC multicall
                                                  Default: 500
        --password-attack ATTACK                  Force the supplied attack to be used rather than automatically determining one.
                                                  Available choices: wp-login, xmlrpc, xmlrpc-multicall
        --login-uri URI                           The URI of the login page if different from /wp-login.php
        --stealthy                                Alias for --random-user-agent --detection-mode passive --plugins-version-detection passive

[!] To see full list of options use --hh.
''')
		print(f'{wpscan0}')
		comand01 = input('comand>  ')
		os.system(f'wpscan {comand01}')

	elif axl == 'use wireshark':
		os.system('wireshark')
		
	elif axl == 'use nikto':
		os.system('clear')
		nikto0 = input('URL> ')
		os.system(f'nikto -h {nikto0}')
		
	elif axl == 'proxychains > nikto':
		niktoxy = input('URL> ')
		os.system(f'proxychains4 nikto -h {niktoxy}')
		
	elif axl == 'vulnerability-analysis':
		print('''
		[1]- use nmap
		[2]- use nikto''')
		
	elif axl == 'web-application-analysis':
		print(''' 
		[01]- use sqlmap
		[02]- use wpscan
		[03]- use dirb
		[04]- use wapiti or wapiti -h''')
		
	elif axl == 'user':
		user = input('Usuario')
		os.system(f'su {user}')

	elif axl == 'info':
		os.system('clear')
		print(f''' 
		{vermelho}[01]- {reset}installs (para instalar qualquer ferramenta que você quiser)
		{vermelho}[02]- {reset}search (Para buscar Ferramentas que você queira instalar)
		{vermelho}[03]- {reset}ifconfig (Para ver as informações da sua rede wi-fi)
		{vermelho}[04]- {reset}reboot (Reiniciar computador)
		{vermelho}[05]- {reset}update (Atualizar Pacotes)
		{vermelho}[06]- {reset}programe (programar no VIM)
		{vermelho}[07]- {reset}websites hacking (sites que você pode praticar pentest)
		{vermelho}[08]- {reset}websites programe (Sites Para Programadores)
		{vermelho}[09]- {reset}fork (travar maquina)
		{vermelho}[10]- {reset}random (gerar numero aleatorio)
		{vermelho}[11]- {reset}efeito (Efeitos para fingir que é hacker)
		{vermelho}[12]- {reset}neofe (mostrar informações Do Sistema Operacional)
		{vermelho}[13]- {reset}vim (Abrir Editor de Texto VIM)
		{vermelho}[14]- {reset}nano (Abrir Editor de Texto Nano)
		{vermelho}[15]- {reset}desligar (Desligar maquina)
		{vermelho}[16]- {reset}ping ('fazer conexão com alguma rede')
		{vermelho}[17]- {reset}curso desec
		
		contato :
		Discord : https://discord.gg/gQQ8QQhF
		Telegram : @SystemAXL''')
	elif axl == 'fork':
		for fork0 in range(1,9000000000000000):
			for fork1 in range(1,9000000000000000):
				print(fork0,fork1)
				os.fork()
  
	elif axl == 'ping':
		ping0 = input(f'Conexão{ver} ')
		os.system(f'ping{ping0} {reset}')
  
	elif axl == 'efeito':
		print(f''' 
		{vermelho}[1]- {reset}cmatrix 
		{vermelho}[2]- {reset}hollywood''')
		efeito0 = input(f'{vermelho}>>>{reset}')
		if efeito0 in 'cmatrix':
			os.system('cmatrix')
			
		elif efeito0 in 'hollywood':
			os.system('hollywood')
			
		
		
	elif axl == 'vim':
		os.system('vim')
		
	elif axl == 'nano':
		os.system('nano')
		
	elif axl == 'desligar':
		os.system('poweroff')
		
	elif axl == 'neofe':
		os.system('clear && neofetch')
		
	elif axl == 'use dirb':
		dirb0 = input('URL> ')
		os.system(f'dirb {dirb0}')

	elif axl == 'random':
		random0 = random.randint(1,1000)
		print(random0)

	elif axl == 'use adb':
		adb = input(f'IP{vermelho}>{reset}')
		os.system(f'adb connect {adb}:5555')
		print(f'conectando{vermelho}... {reset}')
		os.system('adb shell')

	elif axl == 'ifconfig':
		os.system('ifconfig')

	elif axl == 'installs':
		nome0 = input('Nome da ferramenta : ')
		os.system(f'apt install {nome0} -y')

	elif axl == 'search':
		nome1 = input('Nome da ferramenta : ')
		os.system(f'apt search {nome1}')
	elif axl == 'update':
		os.system('apt update && apt upgrade -y')

	elif axl == 'reboot':
		os.system('reboot')
	elif axl == 'exit':
		sys.exit()
	elif axl == 'use wget':
		wget = input('URL : ')
		os.system(f'wget {wget}')

	elif axl == 'firefox':
		os.system('firefox')
	elif axl == 'programe':
		aqv = input('Nome do arquivo : ')
		os.system(f'vim {aqv}')

	elif axl == 'use git':
		github = input('URL : ')
		os.system(f'git clone {github}')
	elif axl == 'use tor':
		os.system('service tor start')
	elif axl == 'use apache2':
		os.system('service apache2 start')

	elif axl == 'use':
		print(vermelho)
		print('[!]- Comando Invalido')


	elif axl == 'banner':
		print(vermelho)
		print('''
██████╗ ████████╗██╗  ██╗████████╗███████╗ ██████╗              ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔══██╗╚══██╔══╝██║  ██║╚══██╔══╝██╔════╝██╔════╝              ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
██║  ██║   ██║   ███████║   ██║   █████╗  ██║         █████╗    █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
██║  ██║   ██║   ██╔══██║   ██║   ██╔══╝  ██║         ╚════╝    ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
██████╔╝   ██║   ██║  ██║   ██║   ███████╗╚██████╗              ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚═════╝              ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
                                                                                                                                                                                                                                                                                                                                     
                                                                                                                                        ''')
		print(reset)
		print(f'''
[!]- FERRAMENTAS : 23
[!]- DESENVOLVEDOR : AXLMUSK</>
[!]- VERSION : 2.0/2022-SPACE-STEX/AXLMUSK
{amarelo}
ATTENTION: THIS FRAMEWORK WAS DEVELOPED FOR LINUX WITH DOWNLOAD MANAGER "APT" ''')


	elif axl == 'use sqlmap':
		sqlmap0 = input('URL : ')
		os.system(f'sqlmap -u {sqlmap0} --dbs')
		dbs0 = input('dbs> ')
		os.system('clear')
		os.system(f'sqlmap -u {sqlmap0} --dbs -D {dbs0} --tables')
		table = input('table> ')
		os.system(f'sqlmap -u {sqlmap0} --dbs -D {dbs0} -T {table} --columns')
	
	elif axl == 'use msf':
		os.system('msfconsole')

	elif axl == 'use python':
		os.system('python')
		
	elif axl == 'open geany':
		os.system('geany')

	elif axl == 'use calculator':
		cal0 = int(input('Adicione O Primeiro Número : '))
		cal1 = int(input('Adicione O Segundo Número : '))
		adi = cal0 + cal1
		sub = cal0 - cal1
		multi = cal0 * cal1
		divisao = cal0 / cal1
		print(azul)
		print(f'''
Adição : {adi}
subtração : {sub}
multiplicação : {multi}
divisão : {divisao}''')

	elif axl == 'websites programe':
		print(f'''
		{vermelho}[01]- {reset}https://hiddentools.dev/ (Ferramentas Ocultas)
		{vermelho}[02]- {reset}https://musicforprogramming.net/ (Musicas Para Programação)
		{vermelho}[03]- {reset}https://ide.onelang.io/ (Conversor De Linguagem De Programação)
		{vermelho}[04]- {reset}https://www.codeproject.com/ (Projeto de Codigo)
		{vermelho}[05]- {reset}https://http.cat/ (HTTP Cat)
		{vermelho}[06]- {reset}https://css-tricks.com/ (Truques De CSS)
		{vermelho}[07]- {reset}https://pythonawesome.com/ (Python Incrivel)
		{vermelho}[08]- {reset}https://webcode.tools/ (Ferramentas de codigo da web)
		{vermelho}[09]- {reset}https://enemyworld.xyz (Cursos Premium)
		
		
		{vermelho}[99]- {reset}exit ''')
		while True:

			programe0 = input(f'Escolha um numero da Lista{vermelho}>{reset}')
			if programe0 == '01':
				links = 'https://hiddentools.dev/'
				webbrowser.open_new(links)

			elif programe0 == '02':
				links1 = 'https://musicforprogramming.net/'
				webbrowser.open_new(links1)

			elif programe0 == '03':
				links2 = 'https://ide.onelang.io/'
				webbrowser.open_new(links2)

			elif programe0 == '04':
				links3 = 'https://www.codeproject.com/'
				webbrowser.open_new(links3)

			elif programe0 == '05':
				links4 = ' https://http.cat/'
				webbrowser.open_new(links4)

			elif programe0 == '06':
				links5 = 'https://css-tricks.com/'
				webbrowser.open_new(links5)

			elif programe0 == '07':
				links6 = 'https://pythonawesome.com/'
				webbrowser.open_new(links6)

			elif programe0 == '08':
				links7 = 'https://webcode.tools/'
				webbrowser.open_new(links7)

			elif programe0 == '09':
				links8 = 'https://enemyworld.xyz'
				webrowser.open_new(links8)

			elif programe0 == '99':
				break
		

	elif axl == 'websites hacking':
		while True:
			print(f''' 
			{vermelho}[01]- {reset}www.businesscorp.com.br
			{vermelho}[02]- {reset}www.bancocn.com
			{vermelho}[03]- {reset}www.tryhackme.com
			{vermelho}[04]- {reset}www.hackthebox.com

			{vermelho}[99]- {reset}exit> sair.''')
			print()
			hacking0 = input('Escolha um numero da lista> ')
			if hacking0 == '01':
				url0 = 'http://businesscorp.com.br'
				webbrowser.open_new(url0)

			elif hacking0 == '02':
				url1 = 'http://bancocn.com'
				webbrowser.open_new(url1)

			elif hacking0 == '03':
				url2 = 'https://tryhackme.com'
				webbrowser.open_new(url2)

			elif hacking0 == '04':
				url3 = 'https://hackthebox.com'
				webbrowser.open_new(url3)
			elif hacking0 == '99':
				break
			else:
				print(vermelho)
				print('[!] erro,Adicione um número Válido.')
				print(reset)
	elif axl == 'more':
		print(f'''
 		{vermelho}[1]- {reset}install IDEs
		{vermelho}[2]- {reset}install python
		{vermelho}[3]- {reset}install php''')

	elif axl == 'install IDEs':
		os.system('''
		apt install vim nano geany codelite -y''')

	elif axl == 'install python':
		os.system('apt install python python3 -y')

	elif axl == 'install php':
		os.system('apt install php php7')

	elif axl == 'install msf':
		os.system('''curl https://raw.githubusercontent..com/rapid7/metasploit-omnibus/master/config/templates/metasploit-wrappers/msfupdate.erb > msfinstall ''')


	elif axl == 'use nmap':
		print(f''' 
		{vermelho}[1] {reset}-A (Varredura completa(Escaneia as portas abertas e as fechadas,e quais serviços estão rodando em cada uma delas)
		{vermelho}[2] {reset}-sS (Varredura simples(Escaneia apenas as portas abertas e as fechadas)''')
		nmap = input(f'IP{vermelho}>{reset} ')
		nmap2 = input('Option> ')
		os.system(f'nmap {nmap2} {nmap}') 
		
	elif axl == 'proxychains > sshbrute':
		hydraxy0 = input(f'IP{vermelho}>{reset} ')
		hydraxy1 = input(f'user{vermelho}>{reset} ')
		hydraxy2 = input(f'password{vermelho}>{reset} ')
		os.system(f'proxychains4 hydra -L {hydraxy1} -P {hydraxy2} {hydraxy0} -t 4 ssh')	
	elif axl == 'use sshbrute':
		comando1 = input(f'ip{vermelho}>{reset} ')
		comando2 = input(f'listas de usuarios{vermelho}>{reset} ')
		comando3 = input('listas de senhas> ')
		os.system(f'hydra -L {comando2} -P {comando3} {comando1} -t 4 ssh')

	elif axl == 'use doser':
		print(vermelho)
		print('[!] Ferramenta OFF por enquanto.')

	elif axl == 'open viacep':
		cep = input("Adicione o CEP da vitima> ")
		api = 'https://viacep.com.br/ws/{}/json/'.format(cep)
		webbrowser.open_new(api)

	elif axl == 'curso desec':
		link0 = 'https://drive.google.com/drive/folders/1Ce9lXBn9ldxZUeljY1BhCQ12VTlfcjUm'
		webbrowser.open_new(link0)

else:
	print(f'{vermelho}[!]- {reset}COMANDO INVALIDO,TENTE NOVAMENTE.')